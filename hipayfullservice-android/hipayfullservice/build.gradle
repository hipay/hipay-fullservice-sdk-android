apply plugin: 'com.android.library'

ext {
    bintrayRepo = 'maven'
    bintrayName = 'hipayfullservice'

    publishedGroupId = 'com.hipay.fullservice'
    libraryName = 'HiPayFullservice'
    artifact = 'hipayfullservice'

    libraryDescription = 'The HiPay Fullservice SDK for Android is a library that allows you to accept payments in your Android application by leveraging the HiPay Fullservice payment platform'

    siteUrl = 'https://github.com/hipay/hipay-fullservice-sdk-android'
    gitUrl = 'https://github.com/hipay/hipay-fullservice-sdk-android.git'

    libraryVersion = '1.4.0'

    developerId = 'hipayandroid'
    developerName = 'Nicolas Fillion'
    developerEmail = 'nfillion21@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName "1.4.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }

    lintOptions {
        disable 'InvalidPackage'
    }
}

ext {
    supportLibVersion = "28.0.0"
    androidTestVersion = "0.4.1"
    hamcrestVersion = "1.3"
    junitVersion = "4.12"
    mockitoVersion = "1.+"
    cardIOVersion = "5.4.2"
    emvNfcCardVersion = "2.1.1"
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.hamcrest:hamcrest-library:${hamcrestVersion}"

    testImplementation "org.powermock:powermock-module-junit4:1.6.5"
    testImplementation "org.powermock:powermock-module-junit4-rule:1.6.5"
    testImplementation "org.powermock:powermock-api-mockito:1.6.5"
    testImplementation "org.powermock:powermock-classloading-xstream:1.6.5"

    androidTestImplementation "com.android.support:support-annotations:${supportLibVersion}"
    androidTestImplementation "com.android.support.test:runner:${androidTestVersion}"
    androidTestImplementation "com.android.support.test:rules:${androidTestVersion}"

    implementation "com.android.support:appcompat-v7:${supportLibVersion}"
    implementation "com.android.support:cardview-v7:${supportLibVersion}"
    implementation "com.android.support:design:${supportLibVersion}"
    implementation "com.android.support:recyclerview-v7:${supportLibVersion}"

    implementation "io.card:android-sdk:${cardIOVersion}"
    implementation "com.github.devnied.emvnfccard:library:${emvNfcCardVersion}"
}

def pomConfig = {
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }

                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }

                scm {
                    url gitUrl
                    connection gitUrl
                    developerConnection siteUrl
                }
}

apply plugin: 'maven'
apply plugin: 'maven-publish'

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompile.classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}


publishing {
    publications {
        myPublication(MavenPublication) {

            artifact androidJavadocsJar
            artifact androidSourcesJar

            pom.withXml {
                //Packaging
                def children = asNode().children()
                def versionIndex = children.indexOf(children.find {it.name().localPart == 'packaging'})
                children.remove(versionIndex)

                asNode().appendNode('packaging', 'aar')

                //Dependencies
                final dependenciesNode = asNode().appendNode('dependencies')

                ext.addDependency = { dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // ignore invalid dependencies

                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)

                    if (!dep.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }

                // List all "compile" dependencies (for old Gradle)
                configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
                // List all "api" dependencies (for new Gradle) as "compile" dependencies
                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }

                //Licenses + Developers + Scm
                asNode().children().last() + pomConfig
            }
        }
    }
}

apply plugin: 'com.jfrog.bintray'

// Bintray

version = libraryVersion

bintray {
    pkg {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")
        publications = ['myPublication']

        configurations = ['archives']
        repo = bintrayRepo
        name = bintrayName
        userOrg = properties.getProperty("bintray.org")
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true
                passphrase = properties.getProperty("bintray.gpg.password")
            }
        }
    }
}